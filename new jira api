let
    // === CONFIGURATION ===
    JiraDomain = "wsib.atlassian.net",
    Email = "your_email@example.com",
    ApiToken = "your_api_token_here",
    JqlQuery = "filter=11824",

    // Encode auth (email:token â†’ base64)
    AuthKey = Binary.ToText(
        Text.ToBinary(Email & ":" & ApiToken),
        BinaryEncoding.Base64
    ),

    // Function to fetch each page of data (POST request)
    GetPage = (StartAt as number) =>
        let
            RequestBody = Text.ToBinary(
                "{""query"": """ & JqlQuery & """," &
                """startAt"": " & Number.ToText(StartAt) & "," &
                """maxResults"": 100," &
                """fields"": [""summary"", ""priority"", ""assignee"", ""status"", ""issuetype"", ""fixVersions"", ""created"", ""customfield_10020""]}"
            ),
            Response = Json.Document(
                Web.Contents(
                    "https://" & JiraDomain & "/rest/api/3/search/jql",
                    [
                        Headers = [
                            #"Authorization" = "Basic " & AuthKey,
                            #"Content-Type" = "application/json"
                        ],
                        Content = RequestBody
                    ]
                )
            )
        in
            Response,

    // Generate a list of pages until no more issues
    Pages = List.Generate(
        () => [StartAt = 0, Response = GetPage(0)],
        each List.Count([Response][issues]) > 0,
        each [StartAt = [StartAt] + 100, Response = GetPage([StartAt])],
        each [Response][issues]
    ),

    // Combine all issues into one list
    CombinedData = List.Combine(Pages),

    // Convert to table and expand fields
    #"Converted to Table" = Table.FromList(CombinedData, Splitter.SplitByNothing(), null, null, ExtraValues.Error),
    #"Expanded Issue" = Table.ExpandRecordColumn(#"Converted to Table", "Column1", {"key","fields"}, {"Jira Id","Fields"}),

    // Expand fields
    #"Expanded Fields" = Table.ExpandRecordColumn(#"Expanded Issue", "Fields", {"summary","priority","assignee","status","issuetype","fixVersions","created","customfield_10020"}, {"Summary","Priority","Assignee","Status","IssueType","FixVersions","CreatedDate","Sprint"}),

    // Expand nested objects
    #"Expanded Priority" = Table.ExpandRecordColumn(#"Expanded Fields", "Priority", {"name"}, {"Priority"}),
    #"Expanded Assignee" = Table.ExpandRecordColumn(#"Expanded Priority", "Assignee", {"displayName"}, {"Assignee"}),
    #"Expanded Status" = Table.ExpandRecordColumn(#"Expanded Assignee", "Status", {"name"}, {"Status"}),
    #"Expanded IssueType" = Table.ExpandRecordColumn(#"Expanded Status", "IssueType", {"name"}, {"Issue Type"}),
    #"Expanded FixVersions" = Table.ExpandListColumn(#"Expanded IssueType", "FixVersions"),
    #"Expanded FixVersions2" = Table.ExpandRecordColumn(#"Expanded FixVersions", "FixVersions", {"name"}, {"Release Date"}),
    #"Expanded Sprint" = Table.ExpandListColumn(#"Expanded FixVersions2", "Sprint"),
    #"Expanded Sprint2" = Table.ExpandRecordColumn(#"Expanded Sprint", "Sprint", {"name"}, {"Sprint"}),

    // Group back Sprint values if multiple
    #"Grouped Rows" = Table.Group(#"Expanded Sprint2", {"Jira Id", "Issue Type", "Summary", "Priority", "Status", "Release Date", "Assignee", "CreatedDate"}, {
        {"Sprint", each Text.Combine(List.Transform([Sprint], Text.From), ", "), type text}
    })
in
    #"Grouped Rows"
