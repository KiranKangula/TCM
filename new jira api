let
    // Read the base URL from Excel named range
    BaseUrlTable = Excel.CurrentWorkbook(){[Name="BaseUrl"]}[Content],
    BaseUrl = BaseUrlTable{0}[Column1],

    // Your Jira credentials
    JiraEmail = "kiran_kangula@wsib.on.ca",
    JiraAPIToken = "ATATT3xFfGF0-JbIzAe00uiDRiCKqLklmhXeFbJ1-WWm0o5p5ox8_HgABGaDbfw7OZtpUOXEXOJuwi0BRqq4YMx2p0jnsw55c2DGJ4oN1IqeQ2wtzlcS084RGNkcOGmQfa_B6HMTpShv35I_6pfdW9ug3uYhMP83hHsSuGIf32jnyFVYgkFoqLU=FDA1B9D4",
    AuthKey = Binary.ToText(Text.ToBinary(JiraEmail & ":" & JiraAPIToken), BinaryEncoding.Base64),
    Headers = [
        #"Authorization" = "Basic " & AuthKey,
        #"Accept" = "application/json"
    ],

  // 3. Function to fetch a page (with safe pageToken encoding)
    GetPage = (Token as nullable text) =>
        let
            Url = if Token = null then BaseUrl else BaseUrl & "&pageToken=" & Uri.EscapeDataString(Token),
            Source = Json.Document(Web.Contents(Url, [Headers=Headers]))
        in
            Source,

    // 4. Fetch all pages sequentially
    AllPages = List.Generate(
        () => [Response = GetPage(null), Token = null, Continue = true],
        each [Continue],
        each [
            Token = try [Response][nextPageToken] otherwise null,
            Response = if Token <> null then GetPage(Token) else null,
            Continue = Response <> null and Record.HasFields(Response, "issues") and List.Count(Response[issues]) > 0
        ],
        each [Response]
    ),

    // 5. Combine issues from all pages
    AllIssues = List.Combine(List.Transform(AllPages, each [issues])),

    // 6. Convert to table and expand main fields
    IssuesTable = Table.FromList(AllIssues, Splitter.SplitByNothing(), {"Record"}),
    Expanded = Table.ExpandRecordColumn(IssuesTable, "Record", {"id","key","fields"}),

    FieldsExpanded = Table.ExpandRecordColumn(Expanded, "fields", 
        {"issuetype","summary","priority","status","fixVersions","assignee","created","customfield_10020"}, 
        {"issuetype","summary","priority","status","fixVersions","assignee","created","customfield_10020"}),

    // 7. Expand nested fields safely
    ExpandIssueType = Table.ExpandRecordColumn(FieldsExpanded, "issuetype", {"name"}, {"Issue Type"}),
    ExpandPriority = Table.ExpandRecordColumn(ExpandIssueType, "priority", {"name"}, {"Priority"}),
    ExpandStatus = Table.ExpandRecordColumn(ExpandPriority, "status", {"name"}, {"Status"}),
    ExpandAssignee = Table.ExpandRecordColumn(ExpandStatus, "assignee", {"displayName"}, {"Assignee"}),

    // 8. Handle empty lists safely
    FixVersionsSafe = Table.TransformColumns(ExpandAssignee, {"fixVersions", each if _ = null then {} else _, type list}),
    FixVersionsExpanded = Table.ExpandListColumn(FixVersionsSafe, "fixVersions"),
    FixVersionsExpanded1 = Table.ExpandRecordColumn(FixVersionsExpanded, "fixVersions", {"name"}, {"Release Date"}),

    CustomfieldSafe = Table.TransformColumns(FixVersionsExpanded1, {"customfield_10020", each if _ = null then {} else _, type list}),
    CustomfieldExpanded = Table.ExpandListColumn(CustomfieldSafe, "customfield_10020"),
    CustomfieldExpanded1 = Table.ExpandRecordColumn(CustomfieldExpanded, "customfield_10020", {"name"}, {"Sprint"}),

    // 9. Rename columns
    Renamed = Table.RenameColumns(CustomfieldExpanded1, {{"key","Jira Id"},{"summary","Summary"},{"created","CreatedDate"}}),

    // 10. Group sprints safely
    Grouped = Table.Group(Renamed, {"Jira Id","Issue Type","Summary","Priority","Status","Release Date","Assignee","CreatedDate"}, 
        {{"Sprint", each if List.Count([Sprint]) = 0 then "" else Text.Combine(List.Transform([Sprint], Text.From), ", "), type text}}
    )
in
    Grouped
