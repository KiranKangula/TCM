let
    // Read the base URL from Excel named range
    BaseUrlTable = Excel.CurrentWorkbook(){[Name="BaseUrl"]}[Content],
    BaseUrl = BaseUrlTable{0}[Column1],

    // Your Jira credentials
    JiraEmail = "kiran_kangula@wsib.on.ca",
    JiraAPIToken = "ATATT3xFfGF0l4Ia0FIYVr8VC-JA8nIrP9SbUEpIRrH76MON2wzYEaWeqSU4dw2GLHoOSYRaNIq1z8aWJVucXZl3PcqopMimIbc5yFVYs-0UW6sE1tcpWs8dPJ_FXD4yColnUJ2M10us-ngRgnoiZRbvSTbePPFs2mdg4MGcmSwGB1uCMuD52jA=58DAD87F",
    AuthKey = Binary.ToText(Text.ToBinary(JiraEmail & ":" & JiraAPIToken), BinaryEncoding.Base64),
    
    Headers = [
        #"Authorization" = "Basic " & AuthKey,
        #"Accept" = "application/json"
    ],

    // Fixed pagination function that works with new JIRA API v3 structure
    GetPage = (Token as nullable text) =>
        let
            // Build URL with nextPageToken parameter
            Url = if Token = null then 
                BaseUrl 
            else 
                BaseUrl & "&nextPageToken=" & Uri.EscapeDataString(Token),
                
            Source = Json.Document(
                Web.Contents(Url, [
                    Headers = Headers,
                    Timeout = #duration(0, 0, 5, 0)  // 5 minute timeout
                ])
            )
        in
            Source,

    // Simplified pagination using the correct API structure
    AllPages = List.Generate(
        () => [
            Response = GetPage(null), 
            Continue = true
        ],
        each [Continue],
        each [
            NextToken = try [Response][nextPageToken] otherwise null,
            IsLast = try [Response][isLast] otherwise true,
            Response = if IsLast = false and NextToken <> null then 
                GetPage(NextToken) 
            else 
                null,
            Continue = Response <> null
        ],
        each [Response]
    ),

    // Extract issues from all pages
    AllIssues = List.Combine(
        List.Transform(
            List.RemoveNulls(AllPages), 
            each [issues]
        )
    ),
    
    // Convert to table
    IssuesTable = Table.FromList(AllIssues, Splitter.SplitByNothing(), {"Record"}),
    
    // Basic expansion
    Expanded = Table.ExpandRecordColumn(IssuesTable, "Record", {"key", "fields"}),
    
    // Expand fields - only essential ones first
    FieldsExpanded = Table.ExpandRecordColumn(Expanded, "fields", 
        {"issuetype", "summary", "priority", "status", "assignee", "created"}, 
        {"issuetype", "summary", "priority", "status", "assignee", "created"}),
    
    // Expand nested simple fields
    IssueTypeExpanded = Table.ExpandRecordColumn(FieldsExpanded, "issuetype", {"name"}, {"Issue Type"}),
    PriorityExpanded = Table.ExpandRecordColumn(IssueTypeExpanded, "priority", {"name"}, {"Priority"}),
    StatusExpanded = Table.ExpandRecordColumn(PriorityExpanded, "status", {"name"}, {"Status"}),
    AssigneeExpanded = Table.ExpandRecordColumn(StatusExpanded, "assignee", {"displayName"}, {"Assignee"}),
    
    // Rename columns
    Final = Table.RenameColumns(AssigneeExpanded, {
        {"key", "Jira Id"},
        {"summary", "Summary"},
        {"created", "CreatedDate"}
    })

in
    Final
