let
    // 1. Read base URL from named range (without pagination parameters)
    RawUrl       = Excel.CurrentWorkbook(){[Name="BaseUrl"]}[Content]{0}[Column1],

    // 2. Credentials
    JiraEmail    = "kiran_kangula@wsib.on.ca",
    JiraToken    = "ATATT3xFfGF0lgqnDBbV-E4N-PilxvcHe-LfchouSDoeM-AdYpILGnK2sbRusGEhQnl7h8Rc8X1yNOJ5a8vLH7g2vsEJ0TgeYoUrSIasha6EGx9Iw7t7MmnPj7OTgwetJRQp-Ke2vAdKaPt9ulUTMaGlXV_BbxK_7SkwfQ_wpSqVjxU9iGbNYkE=2E4D6E84",
    AuthKey      = "Basic " & Binary.ToText(Text.ToBinary(JiraEmail & ":" & JiraToken), BinaryEncoding.Base64),
    Headers      = [ Authorization = AuthKey, Accept = "application/json" ],

    // 3. Pagination function using v3 nextPageToken/isLast
    GetPage = (token as nullable text) =>
        let
            Url      = if token = null then RawUrl else RawUrl & "&nextPageToken=" & Uri.EscapeDataString(token),
            Response = Json.Document(Web.Contents(Url, [Headers=Headers, Timeout=#duration(0,0,5,0)]))
        in
            Response,

    // 4. Generate list of pages
    Pages = List.Generate(
        ()=> [Page = GetPage(null)],
        each [Page][issues] <> null and List.Count([Page][issues]) > 0,
        each [Page = if [Page][isLast] = false then GetPage([Page][nextPageToken]) else null],
        each [Page]
    ),

    // 5. Combine all issues
    AllIssues = List.Combine(List.Transform(Pages, each [issues])),

    // 6. Convert to table and expand
    IssueTbl    = Table.FromList(AllIssues, Splitter.SplitByNothing(), {"Issue"}),
    Exp1        = Table.ExpandRecordColumn(IssueTbl, "Issue", {"key","id","fields"}, {"Jira Id","Issue Internal Id","Fields"}),
    Exp2        = Table.ExpandRecordColumn(Exp1, "Fields",
                      {"issuetype","summary","priority","status","fixVersions","assignee","created","customfield_10020"},
                      {"IssueTypeRec","Summary","PriorityRec","StatusRec","FixVersionsRec","AssigneeRec","CreatedDate","SprintRec"}),

    // 7. Expand single-value nested records
    ExpType     = Table.ExpandRecordColumn(Exp2, "IssueTypeRec", {"name"}, {"Issue Type"}),
    ExpPrio     = Table.ExpandRecordColumn(ExpType, "PriorityRec", {"name"}, {"Priority"}),
    ExpStat     = Table.ExpandRecordColumn(ExpPrio, "StatusRec",   {"name"}, {"Status"}),
    ExpAsgn     = Table.ExpandRecordColumn(ExpStat, "AssigneeRec", {"displayName"}, {"Assignee"}),

    // 8. Convert lists to comma-separated text
    WithFix     = Table.TransformColumns(ExpAsgn, {
                    "FixVersionsRec",
                    each if _ = null or List.Count(_) = 0 then "" else Text.Combine(List.Transform(_, each [name]), ", "),
                    type text
                 }),
    WithSprint  = Table.TransformColumns(WithFix, {
                    "SprintRec",
                    each if _ = null or List.Count(_) = 0 then "" else Text.Combine(List.Transform(_, each [name]), ", "),
                    type text
                 }),

    // 9. Rename and select columns
    Renamed     = Table.RenameColumns(WithSprint, {
                    {"FixVersionsRec","Fix Versions"},
                    {"SprintRec","Sprint"}
                 }),
    Final       = Table.SelectColumns(Renamed, {
                    "Jira Id",
                    "Issue Internal Id",
                    "Issue Type",
                    "Summary",
                    "Priority",
                    "Status",
                    "Fix Versions",
                    "Sprint",
                    "Assignee",
                    "CreatedDate"
                 }),
    #"Removed Columns" = Table.RemoveColumns(Final,{"Issue Internal Id"}),
    #"Reordered Columns" = Table.ReorderColumns(#"Removed Columns",{"Jira Id", "Issue Type", "Summary", "Priority", "Status", "Fix Versions", "Assignee", "CreatedDate", "Sprint"})
in
    #"Reordered Columns"
